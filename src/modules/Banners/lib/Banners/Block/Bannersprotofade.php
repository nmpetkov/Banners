<?php

/**
 * @package      Banners
 * @author       Halbrook Technologies
 * @author       Craig Heydenburg
 * @link         http://www.halbrooktech.com
 * @copyright    Copyright (C) 2010
 * @license      http://www.gnu.org/copyleft/gpl.html GNU General Public License
 */
class Banners_Block_Bannersprotofade extends Zikula_Block
{

    /**
     * initialise block
     *
     */
    public function init()
    {
        // Security
        SecurityUtil::registerPermissionSchema('Banners:faderblock:', 'Block title::');
    }

    /**
     * get information on block
     *
     * @author       Halbrook Technologies
     * @return       array       The block information
     */
    public function info()
    {
        return array('text_type'       => $this->__('Protofade'),
                     'module'          => 'Banners',
                     'text_type_long'  => $this->__('Protofade Banner Display'),
                     'allow_multiple'  => true,
                     'form_content'    => false,
                     'form_refresh'    => false,
                     'show_preview'    => true,
            'admin_tableless' => true);
    }

    /**
     * display block
     *
     * @param        array       $blockinfo     a blockinfo structure
     * @return       output      the rendered bock
     */
    public function display($blockinfo)
    {
        if (!SecurityUtil::checkPermission('Banners:protofadeblock:', "$blockinfo[title]::", ACCESS_READ)) {
            return;
        }

        // Get variables from content block
        $vars = BlockUtil::varsFromContent($blockinfo['content']);
        $vars['controls']  = (!isset($vars['controls'])  || empty($vars['controls']))  ? 'false' : 'true';
        $vars['autostart'] = (!isset($vars['autostart']) || empty($vars['autostart'])) ? 'false' : 'true';
        $vars['esquare']   = (!isset($vars['esquare'])   || empty($vars['esquare']))   ? 'false' : 'true';

        // Check if the Banners module is available.
        if (!ModUtil::available('Banners')) {
            return false;
        }
        if (empty($vars['blocktype'])) {
            return false;
        }

        $banner = ModUtil::func('Banners', 'user', 'rotate', array('blocktype' => $vars['blocktype']));
        // assign the banner
        $this->view->assign('blockid', $blockinfo['bid']);
        $this->view->assign('banner', $banner);
        $this->view->assign('vars', $vars);

        // Populate block info and pass to theme
        $blockinfo['content'] = $this->view->fetch('blocks/protofade.tpl');

        return BlockUtil::themeBlock($blockinfo);
    }

    /**
     * modify block settings
     *
     * @param        array       $blockinfo     a blockinfo structure
     * @return       output      the block form
     */
    public function modify($blockinfo)
    {
        // Get current content
        $vars = BlockUtil::varsFromContent($blockinfo['content']);

        // Defaults
        $vars['blocktype'] = (empty($vars['blocktype'])) ? array()   : $vars['blocktype'];
        $vars['hovertext'] = (empty($vars['hovertext'])) ? 0         : $vars['hovertext'];
        $vars['duration']  = (empty($vars['duration']))  ? '1.0'     : $vars['duration'];
        $vars['controls']  = (empty($vars['controls']))  ? 0         : $vars['controls'];
        $vars['autostart'] = (empty($vars['autostart'])) ? 0         : $vars['autostart'];
        $vars['esquare']   = (empty($vars['esquare']))   ? 0         : $vars['esquare'];
        $vars['erows']     = (empty($vars['erows']))     ? 3         : $vars['erows'];
        $vars['ecols']     = (empty($vars['ecols']))     ? 5         : $vars['ecols'];
        $vars['ecolor']    = (empty($vars['ecolor']))    ? '#FFFFFF' : $vars['ecolor'];

        // load the category registry util
        $catregistry = CategoryRegistryUtil::getRegisteredModuleCategories('Banners', 'banners');
        $this->view->assign('catregistry', $catregistry);

        // assign the approriate values
        $this->view->assign('vars', $vars);

        // Return the output that has been generated by this function
        return $this->view->fetch('blocks/protofade_modify.tpl');
    }

    /**
     * update block settings
     *
     * @param        array       $blockinfo     a blockinfo structure
     * @return       $blockinfo  the modified blockinfo structure
     */
    public function update($blockinfo)
    {
        // Get current content
        $vars = BlockUtil::varsFromContent($blockinfo['content']);

        // alter the corresponding variable
        $vars['blocktype'] = FormUtil::getPassedValue('blocktype', null,      'POST');
        $vars['hovertext'] = FormUtil::getPassedValue('hovertext', '',        'POST');
        $vars['duration']  = FormUtil::getPassedValue('duration',  '1.0',     'POST');
        $vars['controls']  = FormUtil::getPassedValue('controls',  '',        'POST');
        $vars['autostart'] = FormUtil::getPassedValue('autostart', '',        'POST');
        $vars['esquare']   = FormUtil::getPassedValue('esquare',   '',        'POST');
        $vars['erows']     = FormUtil::getPassedValue('erows',     '3',       'POST');
        $vars['ecols']     = FormUtil::getPassedValue('ecols',     '5',       'POST');
        $vars['ecolor']    = FormUtil::getPassedValue('ecolor',    '#FFFFFF', 'POST');

        // write back the new contents
        $blockinfo['content'] = BlockUtil::varsToContent($vars);

        $this->view->clear_cache('blocks/protofade.tpl');

        return $blockinfo;
    }

}